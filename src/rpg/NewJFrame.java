/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package rpg;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.*;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;

/**
 *
 * @author Isaac
 */
public class NewJFrame extends javax.swing.JFrame {
static int y = 0;
static int x = 0;
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("west ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("east ");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("north");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("south");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("rest ");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel1.setText("0,0");

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("hello, " + RPG.name + ", a " + RPG.whatclass + " with " + RPG.hp + " hp");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 0, 0)));
        jScrollPane1.setViewportView(jTextArea1);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(51, 255, 255)));

        jTextArea2.setColumns(20);
        jTextArea2.setEditable(false);
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(5);
        jTextArea2.setWrapStyleWord(true);
        jScrollPane2.setViewportView(jTextArea2);

        jMenu1.setText("File");

        jMenuItem1.setText("save game");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("load game");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton4)
                                    .addComponent(jButton3)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton2))))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addContainerGap())
            .addComponent(jScrollPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            y = y + 1;
            jLabel1.setText(x + "," + y);
            encounter();
        } catch (InterruptedException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        RPG.updatestats();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            y = y - 1;
            jLabel1.setText(x + "," + y);
            encounter();
        } catch (InterruptedException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        RPG.updatestats();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            x = x - 1;
            jLabel1.setText(x + "," + y);
            encounter();
        } catch (InterruptedException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        RPG.updatestats();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        x = x + 1;
        jLabel1.setText(x + "," + y);
        try {
            encounter();
        } catch (InterruptedException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        RPG.updatestats();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try {
            encounter();
            if (jTextArea1.getText().equals("nothing has happened")) {
                jTextArea1.setText("you rested and gained 5 hp");
                RPG.hp++;
            }
        } catch (InterruptedException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        RPG.updatestats();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
            //File files = new File("C:/RPG/save.sav");
            //File other = new File("C:/RPG/inv.sav");
            //File invto = new File("C:/RPG/inv2.sav");
            SaveLoadEngine.save();
        /*try {
            BufferedWriter gg = new BufferedWriter(new FileWriter(files));
            BufferedWriter ff = new BufferedWriter(new FileWriter(other));
            BufferedWriter hh = new BufferedWriter(new FileWriter(invto));
            gg.write(RPG.name); 
            gg.newLine();
            gg.write(Integer.toString(RPG.hp)); 
            gg.newLine();
            gg.write(Integer.toString(RPG.maxhp)); 
            gg.newLine();
            gg.write(Integer.toString(RPG.strength)); 
            gg.newLine();
            gg.write(Integer.toString(RPG.magic));
            gg.newLine();
            gg.write(Integer.toString(RPG.initiative));
            gg.newLine();
            gg.write(RPG.whatclass);
            gg.newLine();
            gg.write(Integer.toString(RPG.exp)); 
            gg.newLine();
            gg.write(Integer.toString(RPG.level));
            gg.newLine();
            gg.close();
            for(int i = 0; i < RPG.inventory.length; i++) {
                ff.write(RPG.inventory[i].toString());
                ff.newLine();
            }
            for (int g = 0; g < RPG.inventorypower.length; g++) {
                hh.write (RPG.inventorypower[g]);
                hh.newLine();
            }
            ff.close();
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }*/
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        SaveLoadEngine.load();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void NewJFrame(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
public void encounter() throws InterruptedException {
    Random chance = new Random();
    int h = chance.nextInt(100) + 1;
    if (h<21) {
        jTextArea1.setText("nothing has happened");
    }
    else if (h<51) {
        if (RPG.arguments.equals("-old")) {
            village v = new village();
            v.setVisible(true);
        }
        else if (h<81) {
        int yy = JOptionPane.showOptionDialog(RPG.frame, 
                "you have encountered a village", 
                "village", JOptionPane.YES_NO_CANCEL_OPTION, 
                JOptionPane.INFORMATION_MESSAGE, 
                null, 
                RPG.village, 
                RPG.village[2]);
        System.out.println(yy);
        if (yy == 0) {
            RPG.frame.setthetext("you have rested and gained 10 hp");
        RPG.hp = RPG.hp + 10;
        if (RPG.hp > RPG.maxhp) {
            RPG.hp = RPG.maxhp;
        }
        RPG.frame.setthetext(RPG.frame.getthetext() + "\nyou now have " + RPG.hp + " hp");
        }
        else if (yy == 1) {
            if (RPG.exp > 99) {
            JOptionPane.showMessageDialog( this, "you have gained a level");
            RPG.exp = RPG.exp - 100;
            RPG.level++;
            RPG.strength = RPG.strength + 10;
            RPG.magic = RPG.magic + 5;
            RPG.maxhp = RPG.maxhp + 15;
            RPG.hp = RPG.maxhp;
        }
            else {
                JOptionPane.showMessageDialog( this, "you need 100 exp");
            }
        }
        else if (yy == 2) {
            JOptionPane.showMessageDialog(this, "Please purchase the 'purchasing' DLC");
            int oo = JOptionPane.showOptionDialog(this, "what do you wish to buy?", 
                    "shop", 
                    JOptionPane.YES_NO_CANCEL_OPTION, 
                    JOptionPane.QUESTION_MESSAGE, null, RPG.shop, 
                    RPG.shop[RPG.shop.length - 1]);
            if (RPG.gold < RPG.shopgold[oo]) {
                JOptionPane.showMessageDialog(this, "you don't have enough money");
            }
            String ll = "use " + RPG.shop[oo];
                    RPG.gold = RPG.gold - RPG.shopgold[oo];
                    RPG.inventory[RPG.on] = ll;
                    RPG.inventorypower[RPG.on - 1] = RPG.shoppower[oo];
                    RPG.on++;
        }
        }
    }
    else if (h<91) {
        //troll();
        fight(10, 10, "troll");
    }
    else {
        //goblin();
        fight(10, 3, "goblin");
    }
}
/*
public void goblin() throws InterruptedException {
    boolean dead = false;
    int turn;
    int goblinhp = 10;
    JOptionPane.showMessageDialog(this, "a goblin appears!");
    if (RPG.initiative < 2) {
    turn = 0;
    }
    else {
        turn = 1;
    } 
    
    if (RPG.whatclass.equals("fighter")) {
    while (goblinhp > 0 && dead == false) {
    if (turn == 0) {
        JOptionPane.showMessageDialog(this, "the goblin attacks!");
        Random hit = new Random();
        RPG.hp = RPG.hp - hit.nextInt(3);
        JOptionPane.showMessageDialog(this, "you have " + RPG.hp + " hp.");
        if (RPG.hp < 1) {
            dead = true;
        }
        else {
            turn = 1;
        }
    }
    else {
        int vv = JOptionPane.showOptionDialog(RPG.frame, 
                "what do you do?", 
                "attack", JOptionPane.YES_NO_CANCEL_OPTION, 
                JOptionPane.QUESTION_MESSAGE, 
                null, 
                RPG.inventory, 
                RPG.inventory[RPG.on - 1]);
        JOptionPane.showMessageDialog(this, "you attack!");
        Random hits = new Random();
        goblinhp = goblinhp - hits.nextInt(RPG.strength + RPG.inventorypower[vv]);
        JOptionPane.showMessageDialog(this, "the goblin now has " + goblinhp + " hp");
        turn = 0;
    }
    }
    }
    else {
        while (goblinhp > 0 && dead == false) {
    if (turn == 0) {
        JOptionPane.showMessageDialog(this, "the goblin attacks!");
        Random hit = new Random();
        RPG.hp = RPG.hp - hit.nextInt(3);
        JOptionPane.showMessageDialog(this, "you have " + RPG.hp + " hp.");
        if (RPG.hp < 1) {
            dead = true;
        }
        else {
            turn = 1;
        }
    }
    else {
        int hh = JOptionPane.showOptionDialog(RPG.frame, 
                "what do you do?", 
                "attack", JOptionPane.YES_NO_CANCEL_OPTION, 
                JOptionPane.QUESTION_MESSAGE, 
                null, 
                RPG.inventory, 
                RPG.inventory[RPG.on - 1]);
        JOptionPane.showMessageDialog(this, "you blast the goblin with magic!");
        Random hits = new Random();
        goblinhp = goblinhp - hits.nextInt(RPG.magic + RPG.inventorypower[hh]);
        JOptionPane.showMessageDialog(this, "the goblin now has " + goblinhp + " hp");
        turn = 0;
    }
    }
    }
    if (dead == false) {
    JOptionPane.showMessageDialog(this, "you have defeated the goblin");
    RPG.exp = RPG.exp + 5;
    JOptionPane.showMessageDialog(this, "you now have " + RPG.exp + " exp and " + RPG.hp + " hp");
    }
    else if (dead == true) {
    JOptionPane.showMessageDialog(this, "you are no longer alive");
    System.exit(0);
    }
}
public void troll() throws InterruptedException {
    boolean dead = false;
    int turn;
    int trollhp = 10;
    JOptionPane.showMessageDialog(this, "a troll appears!");
    if (RPG.initiative < 2) {
    turn = 0;
    }
    else {
        turn = 1;
    } 
    
    if (RPG.whatclass.equals("fighter")) {
    while (trollhp > 0 && dead == false) {
    if (turn == 0) {
        JOptionPane.showMessageDialog(this, "the troll attacks!");
        Random hit = new Random();
        RPG.hp = RPG.hp - hit.nextInt(10);
        JOptionPane.showMessageDialog(this, "you have " + RPG.hp + " hp.");
        if (RPG.hp < 1) {
            dead = true;
        }
        else {
            turn = 1;
        }
    }
    else {
        int vv = JOptionPane.showOptionDialog(RPG.frame, 
                "what do you do?", 
                "attack", JOptionPane.YES_NO_CANCEL_OPTION, 
                JOptionPane.QUESTION_MESSAGE, 
                null, 
                RPG.inventory, 
                RPG.inventory[RPG.on - 1]);
        JOptionPane.showMessageDialog(this, "you attack!");
        Random hits = new Random();
        trollhp = trollhp - hits.nextInt(RPG.strength + RPG.inventorypower[vv]);
        JOptionPane.showMessageDialog(this, "the troll now has " + trollhp + " hp");
        turn = 0;
    }
    }
    }
    else {
        while (trollhp > 0 && dead == false) {
    if (turn == 0) {
        JOptionPane.showMessageDialog(this, "the troll attacks!");
        Random hit = new Random();
        RPG.hp = RPG.hp - hit.nextInt(10);
        JOptionPane.showMessageDialog(this, "you have " + RPG.hp + " hp.");
        if (RPG.hp < 1) {
            dead = true;
        }
        else {
            turn = 1;
        }
    }
    else {
        int hh = JOptionPane.showOptionDialog(RPG.frame, 
                "what do you do?", 
                "attack", JOptionPane.YES_NO_CANCEL_OPTION, 
                JOptionPane.QUESTION_MESSAGE, 
                null, 
                RPG.inventory, 
                RPG.inventory[RPG.on - 1]);
        JOptionPane.showMessageDialog(this, "you blast the troll with magic!");
        Random hits = new Random();
        trollhp = trollhp - hits.nextInt(RPG.magic + RPG.inventorypower[hh]);
        JOptionPane.showMessageDialog(this, "the troll now has " + trollhp + " hp");
        turn = 0;
    }
    }
    }
    if (dead == false) {
    JOptionPane.showMessageDialog(this, "you have defeated the troll");
    RPG.exp = RPG.exp + 5;
    JOptionPane.showMessageDialog(this, "you now have " + RPG.exp + " exp and " + RPG.hp + " hp");
    }
    else if (dead == true) {
    JOptionPane.showMessageDialog(this, "you are no longer alive");
    System.exit(0);
    }
}
*/
public void setthetext(String f) {
    jTextArea1.setText(f);
}
public void setthelabel (String o) {
    jTextArea2.setText(o);
}
public String getthetext() {
    String f = jTextArea1.getText();
    return f;
}
public void fight(int x, int y, String name) throws InterruptedException {
    boolean dead = false;
    int turn;
    int hp = x;
    JOptionPane.showMessageDialog(this, "a " + name + " appears!");
    if (RPG.initiative < 2) {
    turn = 0;
    }
    else {
        turn = 1;
    } 
    
    while (hp > 0 && dead == false) {
    if (turn == 0) {
        JOptionPane.showMessageDialog(this, "the " + name + " attacks!");
        Random hit = new Random();
        RPG.hp = RPG.hp - hit.nextInt(y);
        JOptionPane.showMessageDialog(this, "you have " + RPG.hp + " hp.");
        if (RPG.hp < 1) {
            dead = true;
        }
        else {
            turn = 1;
        }
    }
    else {
        int vv = JOptionPane.showOptionDialog(RPG.frame, 
                "what do you do?", 
                "attack", JOptionPane.YES_NO_CANCEL_OPTION, 
                JOptionPane.QUESTION_MESSAGE, 
                null, 
                RPG.inventory, 
                RPG.inventory[RPG.on - 1]);
        JOptionPane.showMessageDialog(this, "you attack!");
        Random hits = new Random();
        if (RPG.whatclass.equalsIgnoreCase("fighter")) {
            hp = hp - hits.nextInt(RPG.strength + RPG.inventorypower[vv]);
        }
        else {
            hp = hp - hits.nextInt(RPG.magic + RPG.inventorypower[vv]);
        }
        JOptionPane.showMessageDialog(this, "the " + name + " now has " + hp + " hp");
        turn = 0;
    }
    }
    if (dead == false) {
    JOptionPane.showMessageDialog(this, "you have defeated the goblin");
    RPG.exp = RPG.exp + 5;
    JOptionPane.showMessageDialog(this, "you now have " + RPG.exp + " exp and " + RPG.hp + " hp");
    }
    else if (dead == true) {
    JOptionPane.showMessageDialog(this, "you are no longer alive");
    System.exit(0);
    }
}
}
