package rpg;

import java.awt.*;
import java.io.*;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;

/**
 * @author GoddardMorse & Mcat12
 */
public class RPGFrame extends javax.swing.JFrame {
    public enum Monster {
        TROLL(10, 10, "Troll"),
        GOBLIN(10, 3, "Goblin"),
        UNICRON(70, 50, "Unicron"),
        DOCTOR1(10, 10, "William Hartnell"),
        DOCTOR2(15, 11, "Patrick Troughton"),
        DOCTOR3(20, 12, "Jon Pertwee"),
        DOCTOR4(25, 13, "Tom Baker"),
        DOCTOR5(30, 14, "Peter Davison"),
        DOCTOR6(35, 15, "Colin Baker"),
        DOCTOR7(40, 16, "Sylvester McCoy"),
        DOCTOR8(45, 17, "Paul McGann"),
        DOCTOR9(50, 18, "Christopher Eccleston"),
        DOCTOR10(55, 19, "David Tennant"),
        DOCTOR11(60, 20, "Matt Smith");
        int hp;
        int pow;
        String name;
        Monster (int i, int t, String b) {
            hp = i;
            pow = t;
            name = b;
        }
    }
static int y = 0;
static int x = 0;
    /**
     * Creates new form RPGFrame
     */
    public RPGFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bttnWest = new javax.swing.JButton();
        bttnEast = new javax.swing.JButton();
        bttnNorth = new javax.swing.JButton();
        bttnSouth = new javax.swing.JButton();
        bttnRest = new javax.swing.JButton();
        txtLoc = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtOutput = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtStats = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        bttnWest.setText("West");
        bttnWest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnWestActionPerformed(evt);
            }
        });

        bttnEast.setText("East");
        bttnEast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnEastActionPerformed(evt);
            }
        });

        bttnNorth.setText("North");
        bttnNorth.setName(""); // NOI18N
        bttnNorth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnNorthActionPerformed(evt);
            }
        });

        bttnSouth.setText("South");
        bttnSouth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnSouthActionPerformed(evt);
            }
        });

        bttnRest.setText("Rest");
        bttnRest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnRestActionPerformed(evt);
            }
        });

        txtLoc.setText("0,0");

        txtOutput.setEditable(false);
        txtOutput.setColumns(20);
        txtOutput.setLineWrap(true);
        txtOutput.setRows(5);
        txtOutput.setText("hello, " + RPG.name + ", a " + RPG.whatclass + " with " + RPG.hp + " hp");
        txtOutput.setWrapStyleWord(true);
        txtOutput.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 0, 0)));
        jScrollPane1.setViewportView(txtOutput);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(51, 255, 255)));

        txtStats.setEditable(false);
        txtStats.setColumns(20);
        txtStats.setLineWrap(true);
        txtStats.setRows(5);
        txtStats.setWrapStyleWord(true);
        jScrollPane2.setViewportView(txtStats);

        jMenu1.setText("File");

        jMenuItem1.setText("Save Game");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Load Game");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem4.setText("Cheat Mode");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenu2.setText("Fight");

        jMenuItem5.setText("Troll");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem6.setText("Goblin");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setText("Unicron");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuItem8.setText("The Doctor");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenu1.add(jMenu2);

        jMenuItem3.setText("Exit");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(bttnWest)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bttnSouth)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(bttnRest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(bttnNorth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bttnEast))))
                            .addComponent(txtLoc, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(txtLoc, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bttnNorth)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bttnRest)
                    .addComponent(bttnWest)
                    .addComponent(bttnEast))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bttnSouth)
                .addContainerGap())
            .addComponent(jScrollPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bttnNorthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnNorthActionPerformed
        try {
            y = y + 1;
            txtLoc.setText(x + "," + y);
            cheaterTick();
            encounter("N");
        } catch (InterruptedException ex) {
            Logger.getLogger(RPGFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        RPG.updateStats();
    }//GEN-LAST:event_bttnNorthActionPerformed

    private void bttnSouthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnSouthActionPerformed
        try {
            y = y - 1;
            txtLoc.setText(x + "," + y);
            cheaterTick();
            encounter("S");
        } catch (InterruptedException ex) {
            Logger.getLogger(RPGFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        RPG.updateStats();
    }//GEN-LAST:event_bttnSouthActionPerformed

    private void bttnWestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnWestActionPerformed
        try {
            x = x - 1;
            txtLoc.setText(x + "," + y);
            cheaterTick();
            encounter("W");
        } catch (InterruptedException ex) {
            Logger.getLogger(RPGFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        RPG.updateStats();
    }//GEN-LAST:event_bttnWestActionPerformed

    private void bttnEastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnEastActionPerformed
        x = x + 1;
        txtLoc.setText(x + "," + y);
        try {
            cheaterTick();
            encounter("E");
        } catch (InterruptedException ex) {
            Logger.getLogger(RPGFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        RPG.updateStats();
    }//GEN-LAST:event_bttnEastActionPerformed

    private void bttnRestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnRestActionPerformed
        try {
            cheaterTick();
            encounter("R");
            if (txtOutput.getText().equals("Nothing has happened")) {
                txtOutput.setText("You rested and gained 5 HP");
                RPG.hp += 5;
                if (RPG.hp > RPG.maxhp) {
                    RPG.hp = RPG.maxhp;
                }
            }
        } catch (InterruptedException ex) {
            Logger.getLogger(RPGFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        RPG.updateStats();
    }//GEN-LAST:event_bttnRestActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        SaveLoadEngine.save();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        SaveLoadEngine.load();
        RPG.updateStats();
        updateLocation();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        RPG.cheats();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        fight(Monster.TROLL);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        fight(Monster.GOBLIN);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        fight(Monster.UNICRON);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        doctors();
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void NewJFrame(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RPGFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RPGFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RPGFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RPGFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new RPGFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bttnEast;
    private javax.swing.JButton bttnNorth;
    private javax.swing.JButton bttnRest;
    private javax.swing.JButton bttnSouth;
    private javax.swing.JButton bttnWest;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel txtLoc;
    private javax.swing.JTextArea txtOutput;
    private javax.swing.JTextArea txtStats;
    // End of variables declaration//GEN-END:variables
    public void encounter(String compass) throws InterruptedException {
        if (x == 0 && y == 0) {
            if (RPG.goblincount == 0 && RPG.trollcount == 0) {
                JOptionPane.showMessageDialog(null, "\"Congratulations, warrior! You have completed this arduous task.\nYour name will go down in history!\" Says the King.");
            }
            else {
                JOptionPane.showMessageDialog(null, "\"Aren't you supposed to be on a quest?\" Inquires the King.");
            }
        }
        else {
            Random chance = new Random();
            int h = chance.nextInt(100) + 1;
            if (h < 21) {
                //jTextArea1.setText("Nothing has happened");
            }
            else if (h < 51) {
                if (RPG.arguments.equals("-old")) {
                    village v = new village();
                    v.setVisible(true);
                }
                else if (h < 81 && !compass.equals("R")) {
                    village();
                }
            }
            else if (h < 101) {
                if (RPG.trollcount > 0 && h < 76) {
                    fight(Monster.TROLL);
                }
                else {
                    if (RPG.goblincount > 0) {
                        fight(Monster.GOBLIN);
                    }
                }
            }
        }
        updateInfo();
    }

    public void setTheText(String f) {
        txtOutput.setText(f);
    }

    public void setTheLabel(String o) {
        txtStats.setText(o);
    }

    public String getTheText() {
        String f = txtOutput.getText();
        return f;
    }

    public void updateLocation() {
        txtLoc.setText(x + "," + y);
    }
    
    public void updateInfo(){
        this.setTheText("Trolls: " + RPG.trollcount +
                "\nGoblins: " + RPG.goblincount /*+
                "\nUnicrons: " + RPG.unicroncount*/);
    }
    
    public void cheaterTick(){
        if (RPG.cheat) {
            if (RPG.count == 0) {
                JOptionPane.showMessageDialog(RPG.frame, "So long, cheater!");
                System.exit(0);
            }
            else {
                RPG.count--;
            }
        }
    }
    
    public void doctors () {
        fight(Monster.DOCTOR1);
        JOptionPane.showMessageDialog(RPG.frame, "What?! William Hartnell is regenerating!");
        fight(Monster.DOCTOR2);
        JOptionPane.showMessageDialog(RPG.frame, "What?! Patrick Troughton is regenerating!");
        fight(Monster.DOCTOR3);
        JOptionPane.showMessageDialog(RPG.frame, "What?! Jon Pertwee is regenerating!");
        fight(Monster.DOCTOR4);
        JOptionPane.showMessageDialog(RPG.frame, "What?! Tom Baker is regenerating!");
        fight(Monster.DOCTOR5);
        JOptionPane.showMessageDialog(RPG.frame, "What?! Peter Davison is regenerating!");
        fight(Monster.DOCTOR6);
        JOptionPane.showMessageDialog(RPG.frame, "What?! Colin Baker is regenerating!");
        fight(Monster.DOCTOR7);
        JOptionPane.showMessageDialog(RPG.frame, "What?! Sylvester McCoy is regenerating!");
        fight(Monster.DOCTOR8);
        JOptionPane.showMessageDialog(RPG.frame, "What?! Paul McGann is regenerating!");
        fight(Monster.DOCTOR9);
        JOptionPane.showMessageDialog(RPG.frame, "What?! Christopher Eccleston is regenerating!");
        fight(Monster.DOCTOR10);
        JOptionPane.showMessageDialog(RPG.frame, "What?! David Tennant is regenerating!");
        fight(Monster.DOCTOR11);
        JOptionPane.showMessageDialog(RPG.frame, "What?! Matt Smith is regenerating!");
        JOptionPane.showMessageDialog(RPG.frame, "A Peter Capaldi appears!");
        JOptionPane.showMessageDialog(RPG.frame, "Peter Capaldi walks off.");
    }
    public void fight (Monster m) {
        boolean dead = false;
        final int monster = 0;
        final int player = 1;
        int turn;
        int hp = m.hp;
        JOptionPane.showMessageDialog(this, "A " + m.name + " appears!");
        if (RPG.initiative > 2) {
            turn = player;
        } else {
            turn = monster;
        }

        while (hp > 0 && dead == false) {
            switch (turn) {
                case monster:
                    JOptionPane.showMessageDialog(this, "The " + m.name + " attacks!");
                Random hit = new Random();
                RPG.hp = RPG.hp - hit.nextInt(m.pow);
                JOptionPane.showMessageDialog(this, "You have " + RPG.hp + " HP.");
                if (RPG.hp <= 0) {
                    dead = true;
                } else {
                    turn = player;
                }
                    break;
                case player:
                    int vv = JOptionPane.showOptionDialog(RPG.frame,
                        "What do you do?",
                        "Attack", JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        RPG.inventory,
                        RPG.inventory[RPG.on - 1]);
                    switch (RPG.inventorytype[vv]) {
                        default:
                            JOptionPane.showMessageDialog(this, "That is not a valid action");
                            break;
                        case RPG.attack:
                            JOptionPane.showMessageDialog(this, "You attack!");
                Random hits = new Random();
                if (RPG.whatclass.equalsIgnoreCase("Fighter")) {
                    hp = hp - hits.nextInt(RPG.strength + RPG.inventorypower[vv]);
                } else {
                    hp = hp - hits.nextInt(RPG.magic + RPG.inventorypower[vv]);
                }
                if(RPG.zhp){
                    if(hp < 0)
                        hp = 0;
                }
                JOptionPane.showMessageDialog(this, "The " + m.name + " now has " + hp + " HP");
                turn = monster;
                            break;
                        case RPG.heal:
                            RPG.hp = RPG.hp + RPG.inventorypower[vv];
                            if (RPG.hp > RPG.maxhp) {
                                RPG.hp = RPG.maxhp;
                            }
                            JOptionPane.showMessageDialog(this, "The " + RPG.inventory[vv].substring(4) + " gives you " + RPG.inventorypower[vv] + " HP.");
                            JOptionPane.showMessageDialog(this, "You now have " + RPG.hp + " HP.");
                            turn = monster;
                            break;
                    }
                    break;
                    
            }
                
        }
        if (dead == false) {
            JOptionPane.showMessageDialog(this, "You have defeated the " + m.name + "!");
            RPG.exp = RPG.exp + 5;
            RPG.gold = RPG.gold + 5;
            JOptionPane.showMessageDialog(this, "You now have " + RPG.exp + " Exp, " + RPG.hp + " HP, and " + RPG.gold + " Gold.");
            if (m.name().equalsIgnoreCase("troll")) {
                RPG.trollcount--;
            }
            else if (m.name().equalsIgnoreCase("goblin")) {
                RPG.goblincount--;
            }
            else if (m.name().equalsIgnoreCase("unicron")) {
                RPG.unicroncount--;
            }
        } else if (dead == true) {
            JOptionPane.showMessageDialog(this, "You have failed your quest...");
            System.exit(0);
        }
    }
    public void village() {
        int yy = JOptionPane.showOptionDialog(RPG.frame,
                        "You have encountered a village",
                        "Village", JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.INFORMATION_MESSAGE,
                        null,
                        RPG.village,
                        RPG.village[2]);
                System.out.println(yy);
                if (yy == 0) {
                    RPG.frame.setTheText("You have rested and gained 10 HP");
                    RPG.hp += 10;
                    if (RPG.hp > RPG.maxhp) {
                        RPG.hp = RPG.maxhp;
                    }
                    RPG.frame.setTheText(RPG.frame.getTheText() + "\nYou now have " + RPG.hp + " HP");
                } else if (yy == 1) {
                    if (RPG.exp > 99) {
                        JOptionPane.showMessageDialog(this, "You have gained a level!");
                        RPG.exp = RPG.exp - 100;
                        RPG.level++;
                        if(RPG.whatclass.equalsIgnoreCase("Fighter"))
                            RPG.strength = RPG.strength + 10;
                        else
                            RPG.magic = RPG.magic + 10;
                        RPG.maxhp = RPG.maxhp + 15;
                        RPG.hp = RPG.maxhp;
                    } else {
                        JOptionPane.showMessageDialog(this, "You need 100 exp");
                    }
                } else if (yy == 2) {
                    if (RPG.whatclass.equalsIgnoreCase("Fighter")) {
                        int oo = JOptionPane.showOptionDialog(this, "What do you wish to buy?",
                                "Shop",
                                JOptionPane.YES_NO_CANCEL_OPTION,
                                JOptionPane.QUESTION_MESSAGE, null, RPG.shop,
                                RPG.shop[RPG.shop.length - 1]);
                        if (RPG.gold < RPG.shopgold[oo]) {
                            JOptionPane.showMessageDialog(this, "You don't have enough money!");
                        } else {
                            RPG.gold = RPG.gold - RPG.shopgold[oo];
                            RPG.inventory[RPG.on] = "Use " + RPG.shop[oo];
                            RPG.inventorypower[RPG.on] = RPG.shoppower[oo];
                            RPG.inventorytype[RPG.on] = RPG.shoptype[oo];
                            RPG.on++;
                        }
                    } else {
                        int oo = JOptionPane.showOptionDialog(this, "What do you wish to buy?",
                                "Shop",
                                JOptionPane.YES_NO_CANCEL_OPTION,
                                JOptionPane.QUESTION_MESSAGE, null, RPG.mageshop,
                                RPG.mageshop[RPG.mageshop.length - 1]);
                        if (RPG.gold < RPG.mageshopgold[oo]) {
                            JOptionPane.showMessageDialog(this, "You don't have enough money!");
                        } else {
                            RPG.gold = RPG.gold - RPG.mageshopgold[oo];
                            RPG.inventory[RPG.on] = "Use " + RPG.mageshop[oo];
                            RPG.inventorypower[RPG.on] = RPG.mageshoppower[oo];
                            RPG.inventorytype[RPG.on] = RPG.mageshoptype[oo];
                            RPG.on++;
                        }
                    }
                }
            }
}